"use client";

import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/navigation';
import { format, differenceInDays } from 'date-fns';
import { Calendar as CalendarIcon, Star } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { cn } from '@/lib/utils';
// Using inline types instead of importing RoomType to avoid type conflicts
import { DateRange } from 'react-day-picker';

// Remove the default export at the end of the file if it exists
// and ensure there's only one default export

interface RoomWithAvailability {
  id: string;
  name: string;
  description?: string;
  base_price: number;
  price_per_night: number;
  max_occupancy: number;
  room_size?: number | null;
  bed_type?: string | null;
  quantity_available: number;
  amenities: string[];
  images: string[];
  quantity: number;
  totalPrice: number;
  available: boolean;
}

interface AccommodationClientProps {
  initialData: {
    id: string;
    name: string;
    description: string;
    base_price?: number;
    rating?: number;
    room_types?: Array<{
      id: string | number;
      name: string;
      description?: string;
      base_price?: number;
      max_occupancy?: number;
      room_size?: number | null;
      bed_type?: string | null;
      amenities?: string[];
      image_urls?: string[];
      available_rooms?: number;
    }>;
  };
}

export default function AccommodationClient({ initialData }: AccommodationClientProps) {
  const router = useRouter();

  // Initialize state with non-undefined default values
  const [dateRange, setDateRange] = useState<DateRange>({
    from: new Date(),
    to: new Date(new Date().setDate(new Date().getDate() + 2)),
  });

  const [selectedRoom, setSelectedRoom] = useState<RoomWithAvailability | null>(null);
  const [adults, setAdults] = useState(2);
  // Using _ prefix to indicate these variables are intentionally unused
  const [_isLoading, setIsLoading] = useState(false);
  const [isBooking, _setIsBooking] = useState(false);
  // Using _ prefix to indicate this variable is intentionally unused
  const [error, setError] = useState<string | null>(null);
  const [rooms, setRooms] = useState<RoomWithAvailability[]>([]);

  // Calculate number of nights
  const numberOfNights = useMemo(() => {
    if (!dateRange?.from || !dateRange?.to) return 0;
    return differenceInDays(dateRange.to, dateRange.from) || 1;
  }, [dateRange]);

  // Transform room data to match RoomWithAvailability interface
  const processedRooms = useMemo(() => {
    if (!initialData.room_types) return [];
    
    return initialData.room_types.map(room => {
      const price = room.base_price || 0;
      const available = (room.available_rooms || 0) > 0;
      return {
        ...room,
        id: String(room.id),
        name: room.name || 'Standard Room',
        description: room.description || '',
        base_price: price,
        price_per_night: price,
        max_occupancy: room.max_occupancy || 2,
        room_size: room.room_size || null,
        bed_type: room.bed_type || null,
        quantity_available: room.available_rooms || 0,
        quantity: 1,
        totalPrice: price * (dateRange?.from && dateRange?.to ? differenceInDays(dateRange.to, dateRange.from) : 1),
        available,
        amenities: room.amenities || [],
        images: room.image_urls || []
      };
    });
  }, [initialData.room_types, dateRange]);

  // Format price helper
  const formatPrice = useCallback((price: number | string | undefined): string => {
    const priceNum = typeof price === 'string' ? parseFloat(price) : price ?? 0;
    if (isNaN(priceNum)) return '$0';

    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(priceNum);
  }, []);

  // Process rooms data from API (commented out as it's not currently used)
  // const processedRoomsFromApi = useMemo(() => {
    if (!initialData.room_types) return [];

    return initialData.room_types.map(roomType => {
      const availableRooms = rooms.filter(room =>
        room.room_type_id === roomType.id && room.available
      );

      return {
        ...roomType,
        quantity: availableRooms.length,
        totalPrice: (roomType.base_price || 0) * numberOfNights,
        available: availableRooms.length > 0,
        price_per_night: roomType.base_price || 0,
        quantity_available: availableRooms.length,
        // Ensure all required fields are included
        id: String(roomType.id),
        name: roomType.name || 'Standard Room',
        description: roomType.description || '',
        room_size: roomType.room_size || null,
        bed_type: roomType.bed_type || null,
        amenities: roomType.amenities || [],
        images: roomType.image_urls || []
      } as RoomWithAvailability;
    });
  }, [initialData.room_types, rooms, numberOfNights]);

  // Set first room as selected on initial load
  useEffect(() => {
    if (processedRooms.length > 0 && !selectedRoom) {
      setSelectedRoom(processedRooms[0]);
    }
  }, [processedRooms, selectedRoom]);

  // Calculate total price
  const totalPrice = useMemo(() => {
    if (!selectedRoom?.price_per_night || !numberOfNights) return 0;
    return selectedRoom.price_per_night * numberOfNights;
  }, [selectedRoom, numberOfNights]);

  // Handle book now
  const handleBookNow = useCallback(async () => {
    if (!selectedRoom || !dateRange.from || !dateRange.to) return;

    try {
      // Navigate to booking page with query params
      router.push(
        `/book?roomId=${selectedRoom.id}` +
        `&checkIn=${dateRange.from.toISOString()}` +
        `&checkOut=${dateRange.to.toISOString()}` +
        `&adults=${adults}`
      );
    } catch (err) {
      setError('Failed to create booking. Please try again.');
      // Using console.error for error logging in development
      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line no-console
        console.error('Booking error:', err);
      }
    }
  }, [selectedRoom, dateRange, adults, router]);

  // Handle room selection (commented out as it's not currently used)
  // const handleRoomSelect = useCallback((room: RoomWithAvailability) => {
  //   setSelectedRoom(room);
  // }, []);

  // Handle date selection
  const handleDateSelect = useCallback((newDate: DateRange | undefined) => {
    if (newDate?.from) {
      setDateRange({
        from: newDate.from,
        to: newDate.to || newDate.from
      });
      setSelectedRoom(null);
    }
  }, []);

  // Handle increment adults
  const handleIncrementAdults = useCallback(() => {
    if (adults < (selectedRoom?.max_occupancy || 4)) {
      setAdults(prev => prev + 1);
    }
  }, [adults, selectedRoom?.max_occupancy]);

  // Handle decrement adults
  const handleDecrementAdults = useCallback(() => {
    if (adults > 1) {
      setAdults(prev => prev - 1);
    }
  }, [adults]);

  // Fetch rooms when date range changes
  useEffect(() => {
    const fetchRooms = async () => {
      if (!dateRange?.from || !dateRange?.to) return;

      setIsLoading(true);
      setError(null);

      try {
        const response = await fetch(
          `/api/rooms?accommodationId=${initialData.id}` +
          `&checkIn=${dateRange.from?.toISOString()}` +
          `&checkOut=${dateRange.to?.toISOString()}`
        );

        if (!response.ok) {
          throw new Error('Failed to fetch room availability');
        }

        const data = await response.json();
        setRooms(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred');
      } finally {
        setIsLoading(false);
      }
    };

    fetchRooms();
  }, [dateRange, initialData.id]);

  return (
    <div className="container mx-auto p-4 pt-6 md:p-6 lg:p-12 xl:p-24">
      <div className="flex flex-col lg:flex-row lg:space-x-4">
        <div className="lg:w-1/2 xl:w-1/3">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-start">
                <div className="bg-amber-100 dark:bg-amber-900/30 p-2 rounded-lg mr-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-600 dark:text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <h3 className="font-medium text-gray-800 dark:text-white mb-1">Need help?</h3>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">Our team is here to help you with any questions about your stay.</p>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => {
                      // In a production environment, open a contact form or modal
                      if (process.env.NODE_ENV !== 'production') {
                        // eslint-disable-next-line no-console
                        console.log('Contact support clicked');
                      }
                    }}
                  >
                    Contact Support
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        <div className="lg:w-1/2 xl:w-2/3">
          <Card>
            <CardContent className="p-6">
              <div className="flex justify-between mb-4">
                <div>
                  <h2 className="font-medium text-gray-800 dark:text-white mb-1">{initialData.name}</h2>
                  <p className="text-sm text-gray-600 dark:text-gray-300">{initialData.description}</p>
                  <p className="text-lg font-semibold mt-2">
                    {initialData.base_price !== undefined 
                      ? formatPrice(initialData.base_price)
                      : 'Select a room'}
                  </p>
                  <p className="text-sm text-gray-600">
                    {selectedRoom 
                      ? numberOfNights > 1 
                        ? `${formatPrice(selectedRoom.base_price)} x ${numberOfNights} nights`
                        : 'per night'
                      : initialData.base_price 
                        ? 'starting from (per night)'
                        : 'per night'}
                  </p>
                </div>
                <div className="flex items-center gap-1">
                  <Star className="w-5 h-5 text-yellow-400 fill-current" />
                  <span>{initialData.rating || 'N/A'}</span>
                </div>
              </div>

              {/* Date Picker */}
              <div className="space-y-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Dates</label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        id="date"
                        variant="outline"
                        className={cn(
                          'w-full justify-start text-left font-normal',
                          !dateRange?.from && 'text-muted-foreground',
                          'hover:bg-gray-50 transition-colors'
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4 flex-shrink-0" />
                        {dateRange?.from ? (
                          dateRange?.to ? (
                            <span className="truncate">
                              {format(new Date(dateRange.from), 'MMM d, yyyy')} - {' '}
                              {dateRange.to ? format(new Date(dateRange.to), 'MMM d, yyyy') : ''}
                            </span>
                          ) : (
                            <span>{dateRange.from ? format(new Date(dateRange.from), 'MMM d, yyyy') : ''}</span>
                          )
                        ) : (
                          <span>Select dates</span>
                        )}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="end" sideOffset={8}>
                      <div className="p-4">
                        <Calendar
                          initialFocus
                          mode="range"
                          defaultMonth={dateRange?.from}
                          selected={{
                            from: dateRange?.from,
                            to: dateRange?.to
                          }}
                          onSelect={handleDateSelect}
                          numberOfMonths={2}
                          disabled={{
                            before: new Date() // Disable dates before today
                          }}
                          className="rounded-md border"
                        />
                      </div>
                    </PopoverContent>
                  </Popover>
                </div>

                {/* Guests */}
                <div>
                  <label className="block text-sm font-medium mb-1">Guests</label>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={handleDecrementAdults}
                      disabled={adults <= 1}
                    >
                      -
                    </Button>
                    <span className="w-8 text-center">{adults}</span>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={handleIncrementAdults}
                      disabled={adults >= 10}
                    >
                      +
                    </Button>
                    <span className="text-sm text-gray-600 ml-2">Adults</span>
                  </div>
                </div>
              </div>

              {error && (
                <div className="text-red-500 text-sm mb-2">
                  {error}
                </div>
              )}
              <Button 
                className="w-full mt-2"
                onClick={handleBookNow}
                disabled={!selectedRoom || isBooking}
              >
                {isBooking ? 'Booking...' : 'Book Now'}
              </Button>

              {selectedRoom && (
                <div className="mt-4 text-sm text-gray-600">
                  <div className="flex justify-between py-2">
                    <span>
                      {formatPrice(selectedRoom.base_price)} × {numberOfNights} {numberOfNights === 1 ? 'night' : 'nights'}
                    </span>
                    <span>{formatPrice(selectedRoom.price_per_night * numberOfNights)}</span>
                  </div>
                  <div className="border-t pt-2 mt-2 flex justify-between font-semibold">
                    <span>Total</span>
                    <span>{formatPrice(selectedRoom.price_per_night * numberOfNights)}</span>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Help Card */}
          <Card>
            <CardContent className="p-6">
              <div className="flex items-start">
                <div className="bg-amber-100 dark:bg-amber-900/30 p-2 rounded-lg mr-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-600 dark:text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <h3 className="font-medium text-gray-800 dark:text-white mb-1">Need help?</h3>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">Our team is here to help you with any questions about your stay.</p>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => {
                      // In a production environment, open a contact form or modal
                      if (process.env.NODE_ENV !== 'production') {
                        // eslint-disable-next-line no-console
                        console.log('Contact support clicked');
                      }
                    }}
                  >
                    Contact Support
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AccommodationClient;